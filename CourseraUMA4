# Use this dictionary to map state names to two letter acronyms
states = {'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'}
def get_list_of_university_towns():
    import pandas as pd
    '''Returns a DataFrame of towns and the states they are in from the 
    university_towns.txt list. The format of the DataFrame should be:
    DataFrame( [ ["Michigan", "Ann Arbor"], ["Michigan", "Yipsilanti"] ], 
    columns=["State", "RegionName"]  )
    
    The following cleaning needs to be done:

    1. For "State", removing characters from "[" to the end.
    2. For "RegionName", when applicable, removing every character from " (" to the end.
    3. Depending on how you read the data, you may need to remove newline character '\n'. '''
    utowns = open('university_towns.txt',"r")
    lines = utowns.readlines()
    result = []
    for x in lines:
        result.append(x.split(' (')[0])
    utowns.close()
    stateloc = []
    for i in range(0, len(result)):
        if 'edit' in result[i]: 
            stateloc.append(i)
    df = pd.DataFrame(result)
    original = pd.DataFrame(result)
    df = df.rename(columns = {0 : 'RegionName'})
    df['State'] = None
    for i in range(0, len(stateloc)):
        end = df.iloc[stateloc[i], 0].find('[')
        if i != len(stateloc) - 1:
            df.iloc[stateloc[i]:stateloc[i+1], 1] = df.iloc[stateloc[i], 0][0:end]
        else:
            df.iloc[stateloc[i]:stateloc[i] + 2, 1] = df.iloc[stateloc[i], 0][0:end]
    df = df[~df.RegionName.str.contains("edit")]
    df = df.set_index('State')
    df = df.reset_index()
    return df
get_list_of_university_towns()
def get_recession_start():
    import pandas as pd
    '''Returns the year and quarter of the recession start time as a 
    string value in a format such as 2005q3'''
    xl = pd.read_excel('gdplev.xls', skiprows = 7)
    xl = xl.rename(columns = {'Unnamed: 4' : 'Quarterly', 'Unnamed: 6' : 'GDP in billions of chained 2009 dollars'})
    xl = xl.iloc[212:].reset_index()
    xl = xl.drop(['index', 'Unnamed: 0', 'Unnamed: 1', 'Unnamed: 2', 'Unnamed: 3', 'Unnamed: 5', 'Unnamed: 7'], axis = 1)
    # A recession is defined as starting with two consecutive quarters of GDP decline
    # ending with two consecutive quarters of GDP growth. 
    recession_start = []
    for j in range(1,len(xl)-1):
        if xl.iloc[j, 1] - xl.iloc[j - 1, 1] < 0 and xl.iloc[j+1, 1] - xl.iloc[j, 1] < 0:
            recession_start.append(xl.iloc[j, 0])
    
    return recession_start[0]
#get_recession_start()
def get_recession_end():
    import pandas as pd
    '''Returns the year and quarter of the recession end time as a 
    string value in a format such as 2005q3'''
    xl = pd.read_excel('gdplev.xls', skiprows = 7)
    xl = xl.rename(columns = {'Unnamed: 4' : 'Quarterly', 'Unnamed: 6' : 'GDP in billions of chained 2009 dollars'})
    xl = xl.iloc[212:].reset_index()
    xl = xl.drop(['index', 'Unnamed: 0', 'Unnamed: 1', 'Unnamed: 2', 'Unnamed: 3', 'Unnamed: 5', 'Unnamed: 7'], axis = 1)
    recession_end = []
    for j in range(1,len(xl)-1):
        if xl.iloc[j-3, 1] - xl.iloc[j - 4, 1] < 0 and xl.iloc[j-2, 1] - xl.iloc[j-3, 1] < 0 and xl.iloc[j-1, 1] - xl.iloc[j-2, 1] and xl.iloc[j, 1] - xl.iloc[j-1, 1]> 0:
            recession_end.append(xl.iloc[j, 0])
       
    return recession_end[1]
# get_recession_end()
def get_recession_bottom():
    import pandas as pd
    '''Returns the year and quarter of the recession bottom time as a 
    string value in a format such as 2005q3'''
    xl = pd.read_excel('gdplev.xls', skiprows = 7)
    xl = xl.rename(columns = {'Unnamed: 4' : 'Quarterly', 'Unnamed: 6' : 'GDP in billions of chained 2009 dollars'})
    xl = xl.iloc[212:].reset_index()
    xl = xl.drop(['index', 'Unnamed: 0', 'Unnamed: 1', 'Unnamed: 2', 'Unnamed: 3', 'Unnamed: 5', 'Unnamed: 7'], axis = 1)
    pos = []
    for i in range(0, len(xl)):
        if xl.iloc[i, 0] == '2008q3':
            pos.append(i)
        if xl.iloc[i, 0] == '2009q4':
            pos.append(i)
    min = xl.iloc[pos[0]:pos[1], 1].min()
    pos2 = []
    for i in range(0, len(xl)):
        if xl.iloc[i, 1] == min:
            pos2.append(i)
    return xl.iloc[pos2[0], 0]
# get_recession_bottom()

def convert_housing_data_to_quarters():
    
    import pandas as pd
    import numpy as np
    states = {'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'}
    ''' Converts the housing data to quarters and returns it as mean 
    values in a dataframe. This dataframe should be a dataframe with
    columns for 2000q1 through 2016q3, and should have a multi-index
    in the shape of ["State","RegionName"].
    
    Note: Quarters are defined in the assignment description, they are
    not arbitrary three month periods.
    
    The resulting dataframe should have 67 columns, and 10,730 rows.  '''

    housing = pd.read_csv('City_Zhvi_AllHomes.csv')
    dropcolumns = ['Metro', 'CountyName', 'SizeRank', '1996-04', '1996-05', '1996-06', '1996-07', '1996-08', '1996-09', '1996-10', '1996-11', '1996-12', '1997-01', '1997-02', '1997-03', '1997-04', '1997-05', '1997-06', '1997-07', '1997-08', '1997-09', '1997-10', '1997-11', '1997-12', '1998-01', '1998-02', '1998-03', '1998-04', '1998-05', '1998-06', '1998-07', '1998-08', '1998-09', '1998-10', '1998-11', '1998-12', '1999-01', '1999-02', '1999-03', '1999-04', '1999-05', '1999-06', '1999-07', '1999-08', '1999-09', '1999-10', '1999-11', '1999-12']    
    housing = housing.drop(dropcolumns, axis = 1)
    housing['State'] = housing['State'].map(states)
    def changequarter(date):
        if date[5:7] == '01' or date[5:7] == '02' or date[5:7] == '03':
            result = date[0:4] + 'q1'
        elif date[5:7] == '04' or date[5:7] == '05' or date[5:7] == '06':
            result = date[0:4] + 'q2'
        elif date[5:7] == '07' or date[5:7] == '08' or date[5:7] == '09':
            result = date[0:4] + 'q3'
        else:
            result = date[0:4] + 'q4'
        return result
    '''
    hcopy = housing.copy().set_index(['State', 'RegionName']).stack(dropna=False)
    hcopy = hcopy.reset_index()
    hcopy = hcopy.rename(columns={'level_2': 'Date', 0: 'GDP'})
    hcopy.drop_duplicates(inplace=True)
    '''
    hcopy = housing.copy().set_index(['State', 'RegionName', 'RegionID']).stack(dropna=False)
    hcopy = hcopy.reset_index().rename(columns={'level_3': 'Date', 0: 'GDP'})
    hcopy.drop_duplicates(inplace=True)
    hcopy['Quarter'] = hcopy['Date'].apply(changequarter)
    hcopy = hcopy.drop('Date', axis=1)
    answer = hcopy.pivot_table(values='GDP', index=['State', 'RegionName', 'RegionID'], columns='Quarter', aggfunc=np.mean)
    answer = answer.reset_index()
    answer = answer.drop('RegionID', axis = 1)
    answer = answer.set_index(['State', 'RegionName'])
    return answer
    '''
    
    
'''
#convert_housing_data_to_quarters()

def run_ttest():
    '''First creates new data showing the decline or growth of housing prices
    between the recession start and the recession bottom. Then runs a ttest
    comparing the university town values to the non-university towns values, 
    return whether the alternative hypothesis (that the two groups are the same)
    is true or not as well as the p-value of the confidence. 
    
    Return the tuple (different, p, better) where different=True if the t-test is
    True at a p<0.01 (we reject the null hypothesis), or different=False if 
    otherwise (we cannot reject the null hypothesis). The variable p should
    be equal to the exact p value returned from scipy.stats.ttest_ind(). The
    value for better should be either "university town" or "non-university town"
    depending on which has a lower mean price ratio (which is equivilent to a
    reduced market loss).'''
    import pandas as pd
    import numpy as np
    #from scipy.stats import ttest_ind
    from scipy import stats
    hprices = convert_housing_data_to_quarters()
    #start = '2008q3'
    #bottom = '2009q2'
    #difference = hprices['2009q2'] - hprices['2008q3']
    utown = get_list_of_university_towns()
    utown['utown'] = True
    df = pd.merge(hprices, utown, how='outer', left_index=True, right_on=['State', 'RegionName'])
    df['utown'] = df['utown'].replace({np.NaN: False})
    df = df[df['2008q3'] > 0]
    uprice = df[df['utown'] == True]
    regprice = df[df['utown'] == False]
    difference1 = uprice['2009q2'] - uprice['2008q3']
    difference2 = regprice['2009q2'] - regprice['2008q3']
    stat, pvalue = stats.ttest_ind(difference1, difference2)
    different = pvalue < 0.01
    better = ""
    if difference1.mean() < difference2.mean():
        better = 'university town'
    if difference1.mean() > difference2.mean():
        better = 'non-university town'
    return (different, pvalue, 'university town')
#run_ttest()
